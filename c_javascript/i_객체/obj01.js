//obj01.js

//! 객체(Object) 개요

//# 1. 객체의 정의
// : 관련된 데이터아 함수를 모아둔 집합.
// : 객체 내부에서는 속성이라고 하는 데이터와 함수를 프로퍼티(속성)과 메서드(기능)이라고 불림.

//? cf) 객체 지향 프로그래밍
// : 실세계에 존재하고 인지하는 모든 것을 객체로 표현

//# 2. 객체의 특징
 //: (참조) 데이터 타입중 하나, 다양한 값을 담을 수 있는 컨테이너

 //? cf) 배열도 여러타입의 자료를 담을 수 있는 개체의 일부 라고 표현한다.
 // : 여러 데이터를 순차적으로 인덱스를 부여한 타입.
 
 //typeOf(데이터): 해당 데이터의 형태를 반환
 console.log(typeof([1, 2, 3])); // object

 //# 3. 객체의 구조

 // 객체지향 프로그래민의 객체 -고유한 특성과 동작을가지는 것

 // EX) '사람'이라는 객체를 정의

 // 특성_property_변수
 // : 객체가 가진 데이터를 의미한다.
 //: 객체를 구설하는 정보의 일부, 해당객체의 상태를 나타냄.

 // - 이름, 나이, 성별, 직업, 주민등록번호, 키, 몸무게 ...
 

 // 기능_method_함수
 //: 객체가 수행할 수 있는 행동이나 기능을 정의
 //: 객체의 속성을 활용하거나 조작가능

 //: 공부하다, 먹다, 말하다, 걷다. ...등
 

 //* Ex) 책이라는 객체를 정의
 // 책이 가지는 특성
 //: 제목, 저자, 페이지 수, 출판사
 
 // 책의 기능
 //: 페이지를 넘기는 행위, 책을 읽는 행위, 책에 대한 정보를 출력하는 행위 등

 //* Ex) 자동차라는 객체를 정의
 //: 모델 명: Kia k9
 //: 색상 : white
 //: 연식: 2024
 //: 현재속도: 0

 // 기능
 //: 가속하기, 정지하기, 경적울리기

 //* 스마트폰
 // 모델 명, 출시일, 색상, 저장용량, 사이즈

 // 통화, 인터넷, 앱 실행, 알람, 메모 등

let objectName = {
  // 키1: 값1;
  // 키2: 값2;
  // 키3: 값3;
  // ...

  // 값의 데이터 형시게는 제한이 없다. 
  // (배열, 또 다른 객체, 함수 모두 사용 가능)
  // 키와 하나의 쌍으로 나열 , 각각의 쌍은 ,(콤마)로 구분한다. 

  // 값은 중복될 수 있으나 키는 중복 될 수 없다.
  // >> 각각의 멤버 콜론(:)으로 분리된다.
}

let kdh1 = ['김', '다혜'];
// 문자열 작성, lowercase 사용을 권장 따옴표 없이 작성
let kdh2 = {
  lastName : '김',
  firstName : '다혜',

  height: '168',
  hobby : ['a', 'b']
};

//# 5. 객체생성 방법
// 1) 리터럴 방식
// : 가장 간단하고 일반적
// : {중괄호}를 사용하여 객체를 선언하고 초기화 한다.

let person = {
  name: {
    last : '김',
    first : '다혜'
  },
  age: 50,
  gender: 'female',
  interest: ['Dev', 'watchMovie']
}

// 2) 생성자 함수 사용 방식
// : new 키워드와 함께 '사용자 정의 생성자 함수' 를 사용하여 객체를 생성
// >> 같은 형태의 같은 구조의 객체를 여러게 생성할때 유용하게 쓰인다.

//: 함수 내부에서능 this 키워드를 사용해 객체의 속성(property)정의
//? 생성자 함ㄷ수명의 UpperCamelCase 사용을 권장한다.
// 객체 생성을 위한 함수로 사용성을 명확하게 지정하기 위함이다.

function Human(namePara, heightPara) {
  // this 키워드의 경우
  // : 해당 생산자 함수로 생성되는 객체 그 자체
  // : 해당 함수로 생성되는 객체마다 this값이 달라짐
  this.name = namePara;
  this.height = heightPara;

  this.greet = function(){
    console.log(`Hello, ${this.name}!`);
  }
}

let person1 = new Human('김다혜', 168);
let person2 = new Human('김도결', 180);

console.log(person1.name);
console.log(person1.height);

console.log(person2.name);
console.log(person2.height);

